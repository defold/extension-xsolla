local shop = require("xsolla.shop")
local log = require("xsolla.util.log")
log.print()

local PROJECT_ID = "281706"
local DEBUG_BEARER_TOKEN = nil

local function hide_toast(self, immediate)
	local toast = gui.get_node("toast")
	if immediate then
		gui.set_alpha(toast, 0)
	else
		gui.animate(toast, "color.w", 0, gui.EASING_INOUTQUAD, 0.5)
	end
end

local function show_toast(self, text)
	local toast = gui.get_node("toast")
	gui.set_text(gui.get_node("toast_text"), text)
	gui.animate(toast, "color.w", 1, gui.EASING_INOUTQUAD, 0.5)
	timer.delay(4, false, function()
		gui.animate(toast, "color.w", 0, gui.EASING_INOUTQUAD, 0.5)
	end)
end

local function show_spinner(self)
	local spinner = gui.get_node("spinner")
	gui.set_enabled(spinner, true)
	gui.animate(spinner, "euler.z", -360, gui.EASING_INOUTQUAD, 2, 0, nil, gui.PLAYBACK_LOOP_FORWARD)
end

local function hide_spinner(self)
	local spinner = gui.get_node("spinner")
	gui.set_enabled(spinner, false)
	gui.cancel_animation(spinner, gui.PROP_EULER)
	gui.set_euler(spinner, vmath.vector3(0))
end

local function hide_buttons(self)
	for i=1,#self.buttons do
		local button = self.buttons[i]
		gui.set_enabled(button.bg, false)
	end
end

local function show_buttons(self)
	for i=1,#self.buttons do
		local button = self.buttons[i]
		gui.set_enabled(button.bg, true)
	end
end

local function create_order(self, item)
	print("create_order")
	local body = {
		sandbox = true,
		quantity = 1,
		settings = {
			ui = {
				theme = "63295a9a2e47fab76f7708e1",
				desktop = {
					header = {
						is_visible = true,
						visible_logo = true,
						visible_name = true,
						visible_purchase = true,
						type = "normal",
						close_button = true,
					}
				}
			}
		}
	}
	return shop.create_order_with_item(PROJECT_ID, item.sku, body)
end

local function wait(seconds)
	local co = coroutine.running()
	assert(co, "You must call wait() from within a coroutine")
	timer.delay(seconds, false, function()
		coroutine.resume(co)
	end)
	coroutine.yield()
end

local function poll_order_status(self, order)
	return shop.sync(function()
		while true do
			wait(3)
			print("poll_order_status")
			local result = shop.get_order(PROJECT_ID, order.order_id)
			-- Order status: new/paid/done/canceled
			if result.status == "new" then
				log("Order is still in progress")
			else
				return result
			end
		end
	end)
end


local function get_sellable_items(self)
	hide_buttons(self)
	show_spinner(self)
	shop.sync(function()
		local limit = 5
		local offset = 0
		local locale = "en"
		local additional_fields = nil
		local country = "US"
		local promo_code = "WINTER2021"
		local show_inactive_time_limited_items=1
		local items, err = shop.get_sellable_items(PROJECT_ID, limit, offset, locale, additional_fields, country, promo_code, show_inactive_time_limited_items)
		hide_spinner()
		if not items then
			pprint(err)
			show_toast(self, err.message)
			show_buttons(self)
			return
		end
		items = items["items"]
		for i=1,#items do
			local button = self.buttons[i]
			local item = items[i]
			if button then
				button.item = item
				pprint(item)
				gui.set_enabled(button.bg, true)
				local name = item.name
				local amount = item.is_free and "FREE" or item.price.amount
				local currency = item.is_free and "" or item.price.currency
				local text = ("%s - %s%s"):format(name, amount, currency)
				gui.set_text(button.text, text)
			end
		end
	end)
end

local function buy_item(self, item)
	print("buy", item.name)
	
	shop.sync(function()
		hide_buttons(self)
		show_spinner(self)

		local order, err = create_order(self, item)
		if not order then
			pprint(err)
			show_toast(self, err.message)
			get_sellable_items(self)
			return
		end
		pprint(order)
		local url = "https://sandbox-secure.xsolla.com/paystation4/?token=" .. order.token
		print("Open paystation url", url)
		sys.open_url(url, { target = "_blank" })

		local result = poll_order_status(self, order)
		if result then
			show_toast(self, ("Purchase '%s' result: %s"):format(item.name, result.status))
		end
		get_sellable_items(self)
	end)
end



function init(self)
	msg.post(".", "acquire_input_focus")
	-- create buttons
	self.buttons = {}
	for i=1,7 do
		local button = {
			index = i,
			bg = gui.get_node("button" .. i .. "/bg"),
			text = gui.get_node("button" .. i .. "/text"),
		}
		table.insert(self.buttons, button)
	end

	hide_toast(self, true)

	if not DEBUG_BEARER_TOKEN then
		print("ERROR: You must set a bearer token")
		sys.exit(1)
		return
	end
	shop.set_bearer_token(DEBUG_BEARER_TOKEN)
	get_sellable_items(self)
end

function on_input(self, action_id, action)
	if action.pressed then
		for i=1,#self.buttons do
			local button = self.buttons[i]
			if gui.is_enabled(button.bg) and gui.pick_node(button.bg, action.x, action.y) then
				buy_item(self, button.item)
			end
		end
	end
end
