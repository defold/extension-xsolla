local log = require("xsolla.util.log")
local net = require("xsolla.util.net")
local uri = require("xsolla.util.uri")
local async = require("xsolla.util.async")
local retries = require("xsolla.util.retries")
local b64 = require "xsolla.util.b64"

local M = {}

local SERVERS = {
    {{#servers}}
    "{{url}}",
    {{/servers}}
}

local authorization = {
    bearer = nil,
    basic = nil,
    merchant = nil,
    x_unauthorized_id = nil,
    x_user = nil,
}

local config = {
    http_uri = SERVERS[1],
    bearer_token = nil,
    username = nil,
    password = nil,
    timeout = 3,    -- seconds
    retry_policy = retries.fixed(5, 0.5),
}

-- cancellation tokens associated with a coroutine
local cancellation_tokens = {}

--- cancel a cancellation token
function M.cancel(token)
    assert(token)
    token.cancelled = true
end

--- create a cancellation token
-- use this to cancel an ongoing API call or a sequence of API calls
-- @return token Pass the token to a call to xsolla.sync() or to any of the API calls
function M.cancellation_token()
    local token = {
        cancelled = false
    }
    function token.cancel()
        token.cancelled = true
    end
    return token
end

--- set bearer token for authorization
-- @param bearer_token
function M.set_bearer_token(bearer_token)
    config.bearer_token = bearer_token
    authorization.bearer = ("Bearer %s"):format(bearer_token)
end

--- set username and password for authorization
-- @param username
-- @param password
function M.set_username_password(username, password)
    config.username = username
    config.password = password
    local credentials = b64_encode(config.username .. ":" .. config.password)
    authorization.basic = ("Basic %s"):format(credentials)
end

--- set merchant id and api key for use with 'basicMerchantAuth' authentication
-- @param merchant_id
-- @param api_key
function M.set_merchant_auth(merchant_id, api_key)
    local credentials = b64_encode(merchant_id .. ":" .. api_key)
    authorization.merchant = ("Basic %s"):format(credentials)
end

--- set authorization when using 'AuthForCart' authentication
-- @param authorization_id unique identifier
-- @param user e-mail
function M.set_auth_for_cart(authorization_id, user)
    authorization.x_unauthorized_id = authorization_id
    authorization.x_user = b64_encode(user)
end

--- get the payment url for an order
-- @param order
-- @param is_sandbox
-- @return The payment url
function M.get_payment_url(order, is_sandbox)
    if is_sandbox then
        return "https://sandbox-secure.xsolla.com/paystation4/?token=" .. order.token
    else
        return "https://secure.xsolla.com/paystation4/?token=" .. order.token
    end
end

-- Private
-- Run code within a coroutine
-- @param fn The code to run
-- @param cancellation_token Optional cancellation token to cancel the running code
-- @return result or false if an error occurred
-- @return error or nil if no error occurred
function M.sync(fn, cancellation_token)
    assert(fn)
    local result
    local ok, err
    local co = coroutine.running()
    if co then
        ok, err = pcall(function()
            cancellation_tokens[co] = cancellation_token
            result = fn()
            cancellation_tokens[co] = nil
        end)
    else
        co = coroutine.create(function()
            cancellation_tokens[co] = cancellation_token
            result = fn()
            cancellation_tokens[co] = nil
        end)
        ok, err = coroutine.resume(co)
    end
    if not ok then
        log(err)
        cancellation_tokens[co] = nil
        result = false
    end
    return result, err
end

-- http request helper used to reduce code duplication in all API functions below
local function http(callback, url_path, query_params, method, headers, post_data, retry_policy, cancellation_token, handler_fn)
    if callback then
        log(url_path, "with callback")
        net.http(config, url_path, query_params, method, headers, post_data, retry_policy, cancellation_token, function(result)
            if not cancellation_token or not cancellation_token.cancelled then
                if result.error then
                    callback(handler_fn(false, result))
                else
                    callback(handler_fn(result))
                end
            end
        end)
    else
        log(url_path, "with coroutine")
        local co = coroutine.running()
        assert(co, "You must be running this from within a coroutine")

        -- get cancellation token associated with this coroutine
        cancellation_token = cancellation_tokens[co]
        if cancellation_token and cancellation_token.cancelled then
            cancellation_tokens[co] = nil
            return
        end

        return async(function(done)
            net.http(config, url_path, query_params, method, headers, post_data, retry_policy, cancellation_token, function(result)
                if cancellation_token and cancellation_token.cancelled then
                    cancellation_tokens[co] = nil
                    return
                end
                if result.error then
                    done(handler_fn(false, result))
                else
                    done(handler_fn(result))
                end
            end)
        end)
    end
end

{{#paths}}

--- {{summary}}
-- {{description}}
-- @path {{path}}
-- @name {{operationId}}
{{#parameters}}
-- @param {{name}} {{#required}}(REQUIRED) {{/required}}{{description}}
{{/parameters}}
{{#requestBody}}
-- @param body
{{/requestBody}}
-- @param callback
-- @param retry_policy
-- @param cancellation_token
{{#security}}
-- @note {{description}}
{{/security}}
{{#requestBodyLuaExample}}
-- @example Request body example
{{{requestBodyLuaExample}}}
{{/requestBodyLuaExample}}
function M.{{operationId}}({{#parameters}}{{name}}, {{/parameters}}{{#requestBody}}body, {{/requestBody}}callback, retry_policy, cancellation_token)
    {{#requestBody}}
    assert(body)
    {{/requestBody}}
    {{#parameters}}
    {{#required}}
    assert({{name}})
    {{/required}}
    {{/parameters}}

    local url_path = "{{ path }}"
    {{#parameters}}
    {{#inpath}}
    url_path = url_path:gsub("%7B{{name}}%7D", uri.encode(tostring({{name}})))
    {{/inpath}}
    {{/parameters}}

    local query_params = {}
    {{#parameters}}
    {{#inquery}}
    query_params["{{name}}"] = {{name}}
    {{/inquery}}
    {{/parameters}}

    local post_data = {{#requestBody}}json.encode(body){{/requestBody}}{{^requestBody}}nil{{/requestBody}}

    local headers = {}
    {{#requestBody}}
    headers["Content-Type"] = "application/json"
    {{/requestBody}}
    {{#security}}
    {{#XsollaLoginUserJWT}}
    headers["Authorization"] = authorization.bearer
    {{/XsollaLoginUserJWT}}
    {{#basicAuth}}
    headers["Authorization"] = authorization.basic
    {{/basicAuth}}
    {{#basicMerchantAuth}}
    headers["Authorization"] = authorization.merchant
    {{/basicMerchantAuth}}
    {{#AuthForCart}}
    if authorization.x_unauthorized_id then
        headers["x-unauthorized-id"] = authorization.x_unauthorized_id
        headers["x-user"] = authorization.x_user
    else
        headers["Authorization"] = authorization.bearer
    end
    {{/AuthForCart}}
    {{/security}}

    return http(callback, url_path, query_params, "{{method}}", headers, post_data, retry_policy, cancellation_token, function(result, err)
        return result, err
    end)
end
{{/paths}}

return M